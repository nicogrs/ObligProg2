package interfaz; // Nicolas Rodriguez y Manuel Ackerman

import dominio.Sistema;
import java.io.*;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

public class VentanaMenuPrincipal extends javax.swing.JFrame implements Serializable {

    public VentanaMenuPrincipal(Sistema unSistema) {
        this.modelo = unSistema;
        initComponents();
        ImageIcon icon = new ImageIcon("icono.png");
        this.setIconImage(icon.getImage());
        setLocationRelativeTo(null); //Centra ventana
        jLabelIconImagenMenuPrincipal.setIcon(new ImageIcon("ImagenesOblig/ImagenMenuPrincipal.jpg"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelMenu = new javax.swing.JPanel();
        jLabelTitulo = new javax.swing.JLabel();
        jLabelIconImagenMenuPrincipal = new javax.swing.JLabel();
        barraMenu = new javax.swing.JMenuBar();
        menuRegistrar = new javax.swing.JMenu();
        itemRegistrarProducto = new javax.swing.JMenuItem();
        itemRegistrarDueño = new javax.swing.JMenuItem();
        itemRegistrarPuesto = new javax.swing.JMenuItem();
        itemRegistrarMayorista = new javax.swing.JMenuItem();
        menuMovimientos = new javax.swing.JMenu();
        itemRegistrarCompraProducto = new javax.swing.JMenuItem();
        itemRegistrarVentaProducto = new javax.swing.JMenuItem();
        menuConsultar = new javax.swing.JMenu();
        itemConsultaProducto = new javax.swing.JMenuItem();
        itemConsultaDueño = new javax.swing.JMenuItem();
        itemConsultarPuesto = new javax.swing.JMenuItem();
        itemConsultarMayorista = new javax.swing.JMenuItem();
        menuAyuda = new javax.swing.JMenu();
        itemAcercaDe = new javax.swing.JMenuItem();
        jMenuSeparador = new javax.swing.JMenu();
        menuGenerarReporte = new javax.swing.JMenu();
        itemReporteMovimiento = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Menu principal - Mercado");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        jPanelMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanelMenu.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jPanelMenuPropertyChange(evt);
            }
        });

        jLabelTitulo.setFont(new java.awt.Font("Arial", 0, 36)); // NOI18N
        jLabelTitulo.setText("Mercado de Frutas y Verduras");

        jLabelIconImagenMenuPrincipal.setIconTextGap(8);
        jLabelIconImagenMenuPrincipal.setPreferredSize(new java.awt.Dimension(1121, 481));

        javax.swing.GroupLayout jPanelMenuLayout = new javax.swing.GroupLayout(jPanelMenu);
        jPanelMenu.setLayout(jPanelMenuLayout);
        jPanelMenuLayout.setHorizontalGroup(
            jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelMenuLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelTitulo)
                    .addGroup(jPanelMenuLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabelIconImagenMenuPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(117, Short.MAX_VALUE))
        );
        jPanelMenuLayout.setVerticalGroup(
            jPanelMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelMenuLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelTitulo)
                .addGap(18, 18, 18)
                .addComponent(jLabelIconImagenMenuPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        getContentPane().add(jPanelMenu);
        jPanelMenu.setBounds(12, 0, 689, 334);

        barraMenu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        barraMenu.setMinimumSize(new java.awt.Dimension(517, 30));
        barraMenu.setPreferredSize(new java.awt.Dimension(517, 30));

        menuRegistrar.setText("Registrar");

        itemRegistrarProducto.setText("Registrar producto");
        itemRegistrarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRegistrarProductoActionPerformed(evt);
            }
        });
        menuRegistrar.add(itemRegistrarProducto);

        itemRegistrarDueño.setText("Registrar dueño");
        itemRegistrarDueño.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRegistrarDueñoActionPerformed(evt);
            }
        });
        menuRegistrar.add(itemRegistrarDueño);

        itemRegistrarPuesto.setText("Registrar puesto");
        itemRegistrarPuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRegistrarPuestoActionPerformed(evt);
            }
        });
        menuRegistrar.add(itemRegistrarPuesto);

        itemRegistrarMayorista.setText("Registrar mayorista");
        itemRegistrarMayorista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRegistrarMayoristaActionPerformed(evt);
            }
        });
        menuRegistrar.add(itemRegistrarMayorista);

        barraMenu.add(menuRegistrar);

        menuMovimientos.setText("Movimientos");

        itemRegistrarCompraProducto.setText("Registrar compra de producto");
        itemRegistrarCompraProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRegistrarCompraProductoActionPerformed(evt);
            }
        });
        menuMovimientos.add(itemRegistrarCompraProducto);

        itemRegistrarVentaProducto.setText("Registrar venta de producto");
        itemRegistrarVentaProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRegistrarVentaProductoActionPerformed(evt);
            }
        });
        menuMovimientos.add(itemRegistrarVentaProducto);

        barraMenu.add(menuMovimientos);

        menuConsultar.setText("Consultar");

        itemConsultaProducto.setText("Consultar por producto");
        itemConsultaProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemConsultaProductoActionPerformed(evt);
            }
        });
        menuConsultar.add(itemConsultaProducto);

        itemConsultaDueño.setText("Consultar por dueño");
        itemConsultaDueño.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemConsultaDueñoActionPerformed(evt);
            }
        });
        menuConsultar.add(itemConsultaDueño);

        itemConsultarPuesto.setText("Consultar por puesto");
        itemConsultarPuesto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemConsultarPuestoActionPerformed(evt);
            }
        });
        menuConsultar.add(itemConsultarPuesto);

        itemConsultarMayorista.setText("Consultar por mayorista");
        itemConsultarMayorista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemConsultarMayoristaActionPerformed(evt);
            }
        });
        menuConsultar.add(itemConsultarMayorista);

        barraMenu.add(menuConsultar);

        menuAyuda.setText("Ayuda");

        itemAcercaDe.setText("Acerca de");
        itemAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAcercaDeActionPerformed(evt);
            }
        });
        menuAyuda.add(itemAcercaDe);

        barraMenu.add(menuAyuda);

        jMenuSeparador.setText("                                                                                                         ");
        jMenuSeparador.setEnabled(false);
        jMenuSeparador.setFocusable(false);
        barraMenu.add(jMenuSeparador);

        menuGenerarReporte.setText("Reportes");
        menuGenerarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuGenerarReporteActionPerformed(evt);
            }
        });

        itemReporteMovimiento.setText("Generar reporte");
        itemReporteMovimiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemReporteMovimientoActionPerformed(evt);
            }
        });
        menuGenerarReporte.add(itemReporteMovimiento);

        barraMenu.add(menuGenerarReporte);

        setJMenuBar(barraMenu);

        setBounds(0, 0, 737, 391);
    }// </editor-fold>//GEN-END:initComponents

    private boolean validarMovimientosReporte() {
        boolean hay = true;
        if (!modelo.hayMovimientos()) {
            hay = false;
            JOptionPane.showMessageDialog(this, "No se realizaron movimientos en el sistema. Debe contar con al menos un movimiento para generar un reporte.",
                    "No se puede generar un reporte.", JOptionPane.WARNING_MESSAGE);
        }
        return hay;
    }

    private String obtenerMensajeRegistro(boolean hayProductos, boolean hayPuestos, boolean hayMayoristas) {
        String mensaje = "";
        if (!hayProductos && hayPuestos && hayMayoristas) {
            mensaje = "No tiene productos registrados en el sistema.\nDebe contar con al menos un producto para realizar esta acción.";
        } else if (hayProductos && !hayPuestos && hayMayoristas) {
            mensaje = "No tiene puestos registrados en el sistema.\nDebe contar con al menos un puesto desde el cual realizar esta acción.";
        } else if (hayProductos && hayPuestos && !hayMayoristas) {
            mensaje = "No tiene mayoristas registrados en el sistema.\nDebe contar con al menos un mayorista para realizar esta acción.";
        } else if (hayProductos && !hayPuestos && !hayMayoristas) {
            mensaje = "No tiene ni puestos ni mayoristas registrados en el sistema.\nDebe contar con al menos un puesto y un mayorista para realizar esta acción.";
        } else if (!hayProductos && !hayPuestos && hayMayoristas) {
            mensaje = "No tiene ni productos ni puestos registrados en el sistema.\nDebe contar con al menos un producto y un puesto para realizar esta acción.";
        } else if (!hayProductos && hayPuestos && !hayMayoristas) {
            mensaje = "No tiene ni productos ni mayoristas registrados en el sistema.\nDebe contar con al menos un producto y un mayorista para realizar esta acción.";
        } else {
            mensaje = "Para poder realizar esta acción debe tener al menos un producto, un puesto y un mayorista registrados.";
        }
        return mensaje;
    }

    private void itemRegistrarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRegistrarProductoActionPerformed
        VentanaRegistrarProducto v = new VentanaRegistrarProducto(this.modelo);
        v.setVisible(true);
    }//GEN-LAST:event_itemRegistrarProductoActionPerformed

    private void itemRegistrarDueñoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRegistrarDueñoActionPerformed
        VentanaRegistrarDueño v = new VentanaRegistrarDueño(this.modelo);
        v.setVisible(true);
    }//GEN-LAST:event_itemRegistrarDueñoActionPerformed

    private void itemRegistrarPuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRegistrarPuestoActionPerformed
        VentanaRegistrarPuesto vP = new VentanaRegistrarPuesto(this.modelo);
        VentanaRegistrarDueño vD = new VentanaRegistrarDueño(this.modelo);
        if (modelo.hayDueños()) {
            vP.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "No tiene dueños en el sistema. Debe contar con al menos un dueño para registrar un puesto.",
                    "No se puede registrar un puesto.", JOptionPane.WARNING_MESSAGE);
            vD.setVisible(true);
        }
    }//GEN-LAST:event_itemRegistrarPuestoActionPerformed

    private void itemRegistrarMayoristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRegistrarMayoristaActionPerformed
        VentanaRegistrarMayorista vM = new VentanaRegistrarMayorista(this.modelo);
        VentanaRegistrarProducto vP = new VentanaRegistrarProducto(this.modelo);
        if (modelo.hayProductos()) {
            vM.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "No tiene productos en el sistema. Debe contar con al menos un producto para registrar un mayorista.",
                    "No se puede registrar un mayorista.", JOptionPane.WARNING_MESSAGE);
            vP.setVisible(true);
        }
    }//GEN-LAST:event_itemRegistrarMayoristaActionPerformed

    private void itemRegistrarCompraProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRegistrarCompraProductoActionPerformed
        VentanaRegistrarCompra v = new VentanaRegistrarCompra(this.modelo);
        if (modelo.hayProductos() && modelo.hayPuestos() && modelo.hayMayoristas()) {
            v.setVisible(true);
        } else {
            String mensaje = obtenerMensajeRegistro(modelo.hayProductos(), modelo.hayPuestos(), modelo.hayMayoristas());
            JOptionPane.showMessageDialog(this, mensaje, "No se puede registrar una compra.", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_itemRegistrarCompraProductoActionPerformed

    private void itemRegistrarVentaProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRegistrarVentaProductoActionPerformed
        VentanaRegistrarVentaProducto v = new VentanaRegistrarVentaProducto(this.modelo);
        if (modelo.hayProductos() && modelo.hayPuestos()) {
            v.setVisible(true);
        } else {
            String mensaje = obtenerMensajeRegistro(modelo.hayProductos(), modelo.hayPuestos(), false);
            JOptionPane.showMessageDialog(this, mensaje, "No se puede registrar una venta.", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_itemRegistrarVentaProductoActionPerformed

    private void itemConsultaProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemConsultaProductoActionPerformed
        VentanaConsultaProducto v = new VentanaConsultaProducto(this.modelo);
        if (modelo.hayProductos()) {
            v.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "No tiene productos creados en el sistema. Debe contar con al menos un producto para consultar.",
                    "No se puede consultar productos.", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_itemConsultaProductoActionPerformed

    private void itemConsultaDueñoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemConsultaDueñoActionPerformed
        VentanaConsultaDueño v = new VentanaConsultaDueño(this.modelo);
        if (modelo.hayDueños()) {
            v.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "No tiene dueños creados en el sistema. Debe contar con al menos un dueño para consultar.",
                    "No se puede consultar dueños.", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_itemConsultaDueñoActionPerformed

    private void itemConsultarPuestoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemConsultarPuestoActionPerformed
        VentanaConsultaPuesto v = new VentanaConsultaPuesto(this.modelo);
        if (modelo.hayPuestos()) {
            v.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "No tiene puestos creados en el sistema. Debe contar con al menos un puesto para consultar.",
                    "No se puede consultar puestos.", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_itemConsultarPuestoActionPerformed

    private void itemConsultarMayoristaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemConsultarMayoristaActionPerformed
        VentanaConsultaMayorista v = new VentanaConsultaMayorista(this.modelo);
        if (modelo.hayMayoristas()) {
            v.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "No tiene mayoristas creados en el sistema. Debe contar con al menos un mayorista para consultar.",
                    "No se puede consultar mayoristas.", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_itemConsultarMayoristaActionPerformed

    private void jPanelMenuPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jPanelMenuPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanelMenuPropertyChange

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try { //Serialización
            FileOutputStream ff = new FileOutputStream("sistema.ser");
            BufferedOutputStream b = new BufferedOutputStream(ff);
            ObjectOutputStream so = new ObjectOutputStream(b);
            so.writeObject(modelo);
            JOptionPane.showMessageDialog(this, "Sistema guardado correctamente. Hasta pronto!", "Información del Sistema.", JOptionPane.INFORMATION_MESSAGE);
            so.close();
            System.exit(0);
        } catch (IOException e) {
            String[] opciones = {"Si", "No"};
            int cerrarDefinitivo = JOptionPane.showOptionDialog(null, "El sistema no pudo ser guardado correctamente.\n¿Desea salir de todas formas?", "Error del Sistema.",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, opciones, opciones[0]);
            if (cerrarDefinitivo == 0) {
                System.exit(0);
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void menuGenerarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGenerarReporteActionPerformed

    }//GEN-LAST:event_menuGenerarReporteActionPerformed

    private void itemReporteMovimientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemReporteMovimientoActionPerformed
        VentanaReporte v1 = new VentanaReporte(this.modelo);
        if (this.validarMovimientosReporte()) {
            v1.setVisible(true);
        }
    }//GEN-LAST:event_itemReporteMovimientoActionPerformed

    private void itemAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAcercaDeActionPerformed
        VentanaAcercaDe v = new VentanaAcercaDe();
        v.setVisible(true);
    }//GEN-LAST:event_itemAcercaDeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JMenuItem itemAcercaDe;
    private javax.swing.JMenuItem itemConsultaDueño;
    private javax.swing.JMenuItem itemConsultaProducto;
    private javax.swing.JMenuItem itemConsultarMayorista;
    private javax.swing.JMenuItem itemConsultarPuesto;
    private javax.swing.JMenuItem itemRegistrarCompraProducto;
    private javax.swing.JMenuItem itemRegistrarDueño;
    private javax.swing.JMenuItem itemRegistrarMayorista;
    private javax.swing.JMenuItem itemRegistrarProducto;
    private javax.swing.JMenuItem itemRegistrarPuesto;
    private javax.swing.JMenuItem itemRegistrarVentaProducto;
    private javax.swing.JMenuItem itemReporteMovimiento;
    private javax.swing.JLabel jLabelIconImagenMenuPrincipal;
    private javax.swing.JLabel jLabelTitulo;
    private javax.swing.JMenu jMenuSeparador;
    private javax.swing.JPanel jPanelMenu;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenu menuConsultar;
    private javax.swing.JMenu menuGenerarReporte;
    private javax.swing.JMenu menuMovimientos;
    private javax.swing.JMenu menuRegistrar;
    // End of variables declaration//GEN-END:variables
    private Sistema modelo;
} // Nicolas Rodriguez y Manuel Ackerman
